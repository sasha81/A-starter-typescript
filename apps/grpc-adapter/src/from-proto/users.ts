// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.14.0
// source: apps/grpc-adapter/proto/users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "users";

export interface CreateUserDto {
  username: string;
  userage: number;
}

export interface User {
  userId: string;
  username: string;
  userage: number;
}

export interface Group {
  groupId: string;
  groupname: string;
  userId: string;
  groupstatus: boolean;
  userstatus: boolean;
}

export interface UserViewDto {
  userId: string;
  username: string;
  userage: number;
  groups: Group[];
}

export interface UsersWithGroupsDto {
  usersWithGroups: UserViewDto[];
}

export interface Empty {
}

export const USERS_PACKAGE_NAME = "users";

export interface UsersServiceClient {
  createUser(request: CreateUserDto): Observable<User>;

  findAllUsers(request: Empty): Observable<UsersWithGroupsDto>;

  updateUser(request: User): Observable<User>;
}

export interface UsersServiceController {
  createUser(request: CreateUserDto): Promise<User> | Observable<User> | User;

  findAllUsers(request: Empty): Promise<UsersWithGroupsDto> | Observable<UsersWithGroupsDto> | UsersWithGroupsDto;

  updateUser(request: User): Promise<User> | Observable<User> | User;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "findAllUsers", "updateUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";
